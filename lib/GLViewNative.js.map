{"version":3,"sources":["../src/GLViewNative.js"],"names":["propTypes","onContextCreate","func","isRequired","style","any","GLViewNative","onRef","ref","gl","getExtension","name","call","props","capture","opt","Promise","reject","Error","takeSnapshotAsync","flush","endFrameEXP","children","rest","__DEV__","console","warn","position","overflow","flex","top","left","opacity"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY;AAChBC,mBAAiB,oBAAUC,IAAV,CAAeC,UADhB;AAEhBC,SAAO,oBAAUC;AAFD,CAAlB;;IAKqBC,Y;;;;;;;;;;;;;;kMAcnBC,K,GAAQ,UAACC,GAAD,EAAoB;AAC1B,YAAKA,GAAL,GAAWA,GAAX;AACD,K,QAEDP,e,GAAkB,UAACQ,EAAD,EAA+B;AAAA,UACvCC,YADuC,GACtBD,EADsB,CACvCC,YADuC;AAE/C;AACA;;AACAD,SAAGC,YAAH,GAAkB,gBAAQ;AACxB,YAAIC,SAAS,WAAb,EAA0B,OAAO,MAAKH,GAAZ;AAC1B,eAAOE,aAAaE,IAAb,CAAkBH,EAAlB,EAAsBE,IAAtB,CAAP;AACD,OAHD;AAIA,YAAKE,KAAL,CAAWZ,eAAX,CAA2BQ,EAA3B;AACD,K,QAEDK,O,GAAU,UACRC,GADQ,EAOJ;AAAA;AAAA,UACIP,GADJ,UACIA,GADJ;;AAEJ,UAAI,CAACA,GAAL,EAAU,OAAOQ,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACV,aAAOV,IAAIW,iBAAJ,CAAsBJ,GAAtB,CAAP;AACD,K;;;;;8BAjCSN,E,EAA2B;AACnCA,SAAGW,KAAH;AACA;AACAX,SAAGY,WAAH;AACD;;;6BA+BQ;AAAA,mBAC+C,KAAKR,KADpD;AAAA,UACCT,KADD,UACCA,KADD;AAAA,UACQH,eADR,UACQA,eADR;AAAA,UACyBqB,QADzB,UACyBA,QADzB;AAAA,UACsCC,IADtC;;AAEP,UAAIC,OAAJ,EAAa;AACX,YAAI,WAAWD,IAAX,IAAmB,YAAYA,IAAnC,EAAyC;AACvCE,kBAAQC,IAAR,CACE,4GADF;AAGD;AACF;AACD,aACE;AAAA;AAAA,qBACMH,IADN;AAEE,iBAAO,CAAC,EAAEI,UAAU,UAAZ,EAAwBC,UAAU,QAAlC,EAAD,EAA+CxB,KAA/C;AAFT;AAIE;AACE,iBAAO,CACLA,KADK,EAEL;AACEyB,kBAAM,CADR;AAEEF,sBAAU,UAFZ;AAGEG,iBAAK,CAHP;AAIEC,kBAAM;AAJR,WAFK,CADT;AAUE,2BAAiB,KAAK9B,eAVxB;AAWE,eAAK,KAAKM;AAXZ,UAJF;AAiBE;AAAA;AAAA,YAAM,OAAO,EAAEyB,SAAS,CAAX,EAAb;AAA8BV;AAA9B;AAjBF,OADF;AAqBD;;;;;;AAxEkBhB,Y,CAKZN,S,GAAYA,S;kBALAM,Y","file":"GLViewNative.js","sourcesContent":["//@flow\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View } from \"react-native\";\nimport { GLView as EXGLView } from \"expo\";\n\nconst propTypes = {\n  onContextCreate: PropTypes.func.isRequired,\n  style: PropTypes.any\n};\n\nexport default class GLViewNative extends Component<{\n  onContextCreate: (gl: WebGLRenderingContext) => void,\n  style?: any,\n  children?: any\n}> {\n  static propTypes = propTypes;\n\n  afterDraw(gl: WebGLRenderingContext) {\n    gl.flush();\n    // $FlowFixMe\n    gl.endFrameEXP();\n  }\n\n  ref: ?EXGLView;\n  onRef = (ref: ?EXGLView) => {\n    this.ref = ref;\n  };\n\n  onContextCreate = (gl: WebGLRenderingContext) => {\n    const { getExtension } = gl;\n    // monkey patch to get a way to access the EXGLView\n    // $FlowFixMe\n    gl.getExtension = name => {\n      if (name === \"GLViewRef\") return this.ref;\n      return getExtension.call(gl, name);\n    };\n    this.props.onContextCreate(gl);\n  };\n\n  capture = (\n    opt: *\n  ): Promise<{\n    uri: string,\n    localUri: string,\n    width: number,\n    height: number\n  }> => {\n    const { ref } = this;\n    if (!ref) return Promise.reject(new Error(\"glView is unmounted\"));\n    return ref.takeSnapshotAsync(opt);\n  };\n\n  render() {\n    const { style, onContextCreate, children, ...rest } = this.props;\n    if (__DEV__) {\n      if (\"width\" in rest || \"height\" in rest) {\n        console.warn(\n          \"gl-react-expo <Surface>: no such width/height prop. instead you must use the style prop like for a <View>.\"\n        );\n      }\n    }\n    return (\n      <View\n        {...rest}\n        style={[{ position: \"relative\", overflow: \"hidden\" }, style]}\n      >\n        <EXGLView\n          style={[\n            style,\n            {\n              flex: 1,\n              position: \"absolute\",\n              top: 0,\n              left: 0\n            }\n          ]}\n          onContextCreate={this.onContextCreate}\n          ref={this.onRef}\n        />\n        <View style={{ opacity: 0 }}>{children}</View>\n      </View>\n    );\n  }\n}\n"]}